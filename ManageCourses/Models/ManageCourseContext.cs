// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ManageCourses.Areas.Admin.Models;

namespace ManageCourses.Models
{
    public partial class ManageCourseContext : DbContext
    {
        public ManageCourseContext()
        {
        }

        public ManageCourseContext(DbContextOptions<ManageCourseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Course_Lesson> Course_Lessons { get; set; }
        public virtual DbSet<category> categories { get; set; }
        public virtual DbSet<trainee> trainees { get; set; }
        public virtual DbSet<trainee_course> trainee_courses { get; set; }
        public virtual DbSet<trainer> trainers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=ManageCourse;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Course>(entity =>
            {
                entity.HasOne(d => d.category)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.categoryId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK__Course__category__412EB0B6");

                entity.HasOne(d => d.trainer)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.trainerId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK__Course__trainerI__403A8C7D");
            });

            modelBuilder.Entity<Course_Lesson>(entity =>
            {
                entity.HasOne(d => d.course)
                    .WithMany(p => p.Course_Lessons)
                    .HasForeignKey(d => d.course_id)
                    .HasConstraintName("FK__Course_Le__cours__440B1D61");
            });

            modelBuilder.Entity<category>(entity =>
            {
                entity.HasOne(d => d.parent)
                    .WithMany(p => p.Inverseparent)
                    .HasForeignKey(d => d.parentId)
                    .HasConstraintName("FK__category__parent__3D5E1FD2");
            });

            modelBuilder.Entity<trainee_course>(entity =>
            {
                entity.HasKey(e => new { e.trainee_id, e.course_id })
                    .HasName("c1");

                entity.HasOne(d => d.course)
                    .WithMany(p => p.trainee_courses)
                    .HasForeignKey(d => d.course_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__trainee_c__cours__49C3F6B7");

                entity.HasOne(d => d.trainee)
                    .WithMany(p => p.trainee_courses)
                    .HasForeignKey(d => d.trainee_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__trainee_c__train__48CFD27E");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

        public DbSet<ManageCourses.Areas.Admin.Models.CategoryVM> CategoryVM { get; set; }

        public DbSet<ManageCourses.Areas.Admin.Models.TrainerVM> TrainerVM { get; set; }
    }
}